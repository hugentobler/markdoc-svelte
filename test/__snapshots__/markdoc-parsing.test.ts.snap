// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Markdown parsing > CommonMark Tags 1`] = `
{
  "code": "<script module>
	export const slug = "test";
</script>
<article><h1>Heading Level 1</h1><h2>Heading Level 2</h2><h3>Heading Level 3</h3><h4>Heading Level 4</h4><h5>Heading Level 5</h5><h6>Heading Level 6</h6><h2>Stext Heading</h2><p>This is a heading specifically for testing <strong>strong text</strong> (stext) within a heading.</p><p>This is a paragraph. It contains some text content to demonstrate how paragraphs work in Markdown.</p><hr /><p>This is a horizontal rule (HR) using three dashes.</p><hr /><p>This is a horizontal rule (HR) using three asterisks.</p><hr /><p>This is a horizontal rule (HR) using three underscores.</p><p><img src="https://example.com/image.jpg" alt="Alt text for the image" title="Image Title" /></p><pre data-language="javascript"><code>// Fenced code block with Markdoc brackets &lcub;&rcub; and multiple linesconst obj = &lcub; key: 'value' &rcub;;console.log(\`Hello, &lcub;world&rcub;! Template: $&lcub;obj.key&rcub;\`);function test() &lcub;  return &lcub; nested: true &rcub;;&rcub;</code></pre><blockquote><p>This is a blockquote. It can span multiple lines.</p></blockquote><ol><li>Ordered list item 1</li><li>Ordered list item 2</li></ol><ul><li>Unordered sublist item 1</li><li>Unordered sublist item 2</li></ul><ol start="3"><li>Ordered list item 3</li></ol><ul><li>Unordered list item 1</li><li>Unordered list item 2<ol><li>Ordered sublist item 1</li><li>Ordered sublist item 2</li></ol></li><li>Unordered list item 3</li></ul><p>This is <strong>strong text</strong>. This is <em>emphasized text</em>. This is <s>strikethrough text</s>.</p><p>This is a <a href="https://example.com" title="Link Title">link</a> to an external website. This is a <a href="https://example.com/tricky" title="Title with &lt; &gt; &amp; &quot; ' characters">link with tricky chars in title</a> testing attribute escaping.</p><p>Here is some <code>inline code</code> within a sentence. Here is inline code with brackets: <code>&lcub; example: true &rcub;</code>.</p><p>This is a line of text. This is another line of text after a hard break.</p><p>This is a line of text with a soft break and it continues on the next line.</p><h3>Tabs</h3><p>Here is a line with a tab: This line starts with a tab character.</p><h3>Special Characters</h3><p>Here are some special characters: <code>! @ # $ % ^ &amp; * ( ) - _ + = &lcub; &rcub; [ ] |  : ; &quot; ' &lt; &gt; , . ? / ~</code></p><h3>Backslash-Escaped Characters</h3><p>Here are some backslash-escaped characters: \\ Backslash \` Backtick</p><ul><li>Asterisk _ Underscore { Curly brace open } Curly brace close [ Square bracket open ] Square bracket close ( Parenthesis open ) Parenthesis close</li></ul><h1>Hash</h1><ul><li>Plus</li></ul><ul><li>Minus . Period ! Exclamation mark</li></ul><h3>Valid HTML Entities or Numeric Characters</h3><p>Here are some valid HTML entities and numeric characters: © (©) ® (®) © (© using numeric code) ® (® using numeric code) & (&) < (<) > (>) " (") ' (')</p><h3>Indented Code Block</h3><p>// This is an indented code block with Markdoc brackets {} function greet() { const config = { enabled: true }; console.log("Hello from {indented} code block!", config); }</p><h3>HTML Block</h3><p><div> <p>This is a block of raw HTML.</p> <p>It will render as HTML if supported.</p> </div></p><h3>Indented Code Fence</h3><pre><code>// This is an indented code fence with &lcub;brackets&rcub;console.log(&quot;Indented &lcub;code&rcub; fence example&quot;);</code></pre><h3>Inline Code Example in Another Block</h3><p>Here is an example of inline code within a blockquote:</p><blockquote><p>This is a blockquote with <code>inline code</code> and <code>&lcub; bracketed: code &rcub;</code> inside it.</p></blockquote></article>",
  "dependencies": [],
}
`;

exports[`Markdown parsing > Markdoc Table 1`] = `
{
  "code": "<script module>
	export const slug = "test";
</script>
<article><h3>Basic table</h3><table><thead><tr><th>Heading 1</th><th>Heading 2</th></tr></thead><tbody><tr><td>Row 1 Cell 1</td><td>Row 1 Cell 2</td></tr><tr><td>Row 2 Cell 1</td><td>Row 2 cell 2</td></tr></tbody></table><h3>Table with rich content</h3><table><thead><tr><th>Foo</th><th>Bar</th><th>Baz</th></tr></thead><tbody><tr><td><pre><code>puts &quot;Some code here.&quot;</code></pre></td><td></td><td>Text in a table</td></tr><tr><td><p>A "loose" list with</p><p>multiple line items</p></td><td><p>Test 2</p></td><td><p>Test 3</p></td></tr><tr><td>Test 1</td><td colSpan="2">A cell that spans two columns </td></tr></tbody></table><h3>Table without headings</h3><table><thead></thead><tbody><tr><td>foo</td><td>bar</td></tr><tr><td>foo</td><td>bar</td></tr></tbody></table><h3>Table with col and row span</h3><table><thead></thead><tbody><tr><td>foo</td><td>bar</td></tr><tr><td colSpan="2">foo </td></tr></tbody></table><h3>Table with text alignment</h3><table><thead><tr><th align="center">Column 1 </th><th>Column 2</th><th align="right">Column 3 </th></tr></thead><tbody><tr><td>foo</td><td>bar</td><td>baz</td></tr><tr><td>foo</td><td align="right">bar </td><td>baz</td></tr><tr><td align="center">foo </td><td>bar</td><td>baz</td></tr></tbody></table></article>",
  "dependencies": [],
}
`;
